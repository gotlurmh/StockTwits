{"version":3,"sources":["components/SearchStock.js","components/TweetsDisplay.js","components/TweetsPreview.js","components/StockWidget.js","App.js","serviceWorker.js","index.js"],"names":["interval","SearchStock","props","useState","searchTerm","setSearchTerm","handleSubmit","event","preventDefault","clearInterval","searchSymbols","split","map","symbol","trim","toUpperCase","Array","from","Set","handleStockSymbols","setInterval","onSubmit","TextField","id","label","helperText","variant","value","onChange","e","target","onKeyUp","placeholder","IconButton","color","aria-label","type","fontSize","theme","createMuiTheme","palette","primary","main","blue","TweetsDisplay","tweet","this","ListItem","alignItems","ListItemAvatar","Avatar","alt","user","name","src","avatar_url","ListItemText","Fragment","Typography","component","username","secondary","body","Component","TweetsPreview","tweets","counter","counts","index","key","align","count","List","Divider","StockWidget","state","error","invalidSymbol","getStockSymbols","stockSymbols","tweetsToDisplay","setState","a","fetch","response","console","log","status","json","data","push","messages","length","invalidSymbols","Container","maxWidth","Card","CardContent","join","App","className","AppBar","position","Toolbar","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.0fd28d76.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\n\r\nlet interval;\r\nconst SearchStock = (props) => {\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    clearInterval(interval);\r\n    let searchSymbols = searchTerm\r\n      .split(\",\")\r\n      .map((symbol) => symbol.trim().toUpperCase());\r\n    searchSymbols = Array.from(new Set(searchSymbols));\r\n    props.handleStockSymbols(searchSymbols);\r\n    interval = setInterval(props.handleStockSymbols, 5000, searchSymbols);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label>\r\n        <TextField\r\n          id=\"outlined-helperText\"\r\n          label=\"$\"\r\n          helperText=\"Multipe symbols must be ',' separated\"\r\n          variant=\"outlined\"\r\n          value={searchTerm}\r\n          onChange={(e) => setSearchTerm(e.target.value)}\r\n          onKeyUp={(e) => (!e.target.value ? handleSubmit(e) : null)}\r\n          placeholder=\"Enter Stock symbol(s)\"\r\n        />\r\n      </label>\r\n      <IconButton color=\"secondary\" aria-label=\"add an alarm\" type=\"submit\">\r\n        <SearchIcon fontSize=\"large\" />\r\n      </IconButton>\r\n    </form>\r\n  );\r\n};\r\nexport default SearchStock;\r\n","import { Typography } from \"@material-ui/core\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport React, { Component } from \"react\";\r\nimport \"typeface-roboto\";\r\nimport { MuiThemeProvider, createMuiTheme } from \"@material-ui/core\";\r\nimport { blue } from \"@material-ui/core/colors\";\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      main: blue[500],\r\n    },\r\n  },\r\n});\r\n\r\nclass TweetsDisplay extends Component {\r\n  render() {\r\n    const { tweet } = this.props;\r\n    return (\r\n      <ListItem alignItems=\"flex-start\">\r\n        <ListItemAvatar>\r\n          <Avatar alt={tweet.user.name} src={tweet.user.avatar_url} />\r\n        </ListItemAvatar>\r\n        <ListItemText\r\n          primary={\r\n            <React.Fragment>\r\n              <MuiThemeProvider theme={theme}>\r\n                <Typography\r\n                  component=\"span\"\r\n                  variant=\"subtitle2\"\r\n                  color=\"primary\"\r\n                >\r\n                  {tweet.user.username}\r\n                </Typography>\r\n              </MuiThemeProvider>\r\n            </React.Fragment>\r\n          }\r\n          secondary={\r\n            <React.Fragment>\r\n              <Typography component=\"span\" variant=\"body2\" color=\"textPrimary\">\r\n                {tweet.body}\r\n              </Typography>\r\n            </React.Fragment>\r\n          }\r\n        />\r\n      </ListItem>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TweetsDisplay;\r\n","import { List } from \"@material-ui/core\";\r\nimport React, { Component } from \"react\";\r\nimport TweetsDisplay from \"./TweetsDisplay\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nclass TweetsPreview extends Component {\r\n  render() {\r\n    const { tweets, counter } = this.props;\r\n\r\n    return (\r\n      <div>\r\n        <div>\r\n          {counter.map((counts, index) => {\r\n            return (\r\n              <Typography key={index} variant=\"subtitle2\" align=\"justify\">\r\n                Tweets displayed for {counts.symbol} is {counts.count}\r\n              </Typography>\r\n            );\r\n          })}\r\n        </div>\r\n        <List>\r\n          {tweets.map((tweet, index) => {\r\n            return (\r\n              <React.Fragment key={index}>\r\n                <TweetsDisplay tweet={tweet} />\r\n                <Divider variant=\"inset\" component=\"li\" />\r\n              </React.Fragment>\r\n            );\r\n          })}\r\n        </List>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TweetsPreview;\r\n","import React, { Component } from \"react\";\r\nimport SearchStock from \"./SearchStock\";\r\nimport TweetsPreview from \"./TweetsPreview\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Container from \"@material-ui/core/Container\";\r\n\r\nclass StockWidget extends Component {\r\n  state = {\r\n    tweets: [],\r\n    counter: [],\r\n    error: false,\r\n    invalidSymbol: [],\r\n  };\r\n\r\n  getStockSymbols = (stockSymbols) => {\r\n    const url = \"https://stock-twit.herokuapp.com/\";\r\n    // const url = \"http://localhost:4000/\";\r\n    const tweetsToDisplay = [];\r\n    const counts = [];\r\n    this.setState({ error: false });\r\n    stockSymbols.map(async (symbol) => {\r\n      if (symbol) {\r\n        const response = await fetch(`${url}${symbol}`);\r\n        console.log(response);\r\n        if (response.status !== 404) {\r\n          const data = await response.json();\r\n          tweetsToDisplay.push(...data.messages);\r\n          this.setState({ tweets: tweetsToDisplay });\r\n          counts.push({ count: data.messages.length, symbol });\r\n          this.setState({ tweets: tweetsToDisplay });\r\n          this.setState({ counter: counts });\r\n        } else {\r\n          const invalidSymbols = new Set([...this.state.invalidSymbol, symbol]);\r\n          this.setState({\r\n            tweets: [],\r\n            counter: [],\r\n            error: true,\r\n            invalidSymbol: Array.from(invalidSymbols),\r\n          });\r\n        }\r\n      } else {\r\n        this.setState({\r\n          tweets: [],\r\n          counter: [],\r\n          error: false,\r\n          invalidSymbol: [],\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Container maxWidth=\"md\">\r\n        <SearchStock handleStockSymbols={this.getStockSymbols} />\r\n        {this.state.error && (\r\n          <Card>\r\n            <CardContent>\r\n              <Typography variant=\"subtitle2\">\r\n                {this.state.invalidSymbol.join(\",\")} is invalid\r\n              </Typography>\r\n            </CardContent>\r\n          </Card>\r\n        )}\r\n        <TweetsPreview\r\n          tweets={this.state.tweets}\r\n          counter={this.state.counter}\r\n        />\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default StockWidget;\r\n","import React from \"react\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { MuiThemeProvider, createMuiTheme } from \"@material-ui/core\";\nimport { blue } from \"@material-ui/core/colors\";\n\nimport \"typeface-roboto\";\nimport \"./App.css\";\n\nimport StockWidget from \"./components/StockWidget\";\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: blue[500],\n    },\n  },\n});\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MuiThemeProvider theme={theme}>\n        <AppBar color=\"primary\" position=\"static\">\n          <Toolbar>\n            <Typography variant=\"h6\">StockTwits Widget</Typography>\n          </Toolbar>\n        </AppBar>\n      </MuiThemeProvider>\n      <Typography variant=\"h5\">\n        <p>Enter the stock symbol(s) to get related tweets</p>\n      </Typography>\n      <StockWidget />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}